

// card.service.ts
export class CardService {
    confirmPayment(cardNum: number, cvv: number) {
        return { message: `Paid with: ${cardNum} with cvv: ${cvv}` };
    }

    verifyCVV(cardNum: number, cvv: number): boolean {
        // implement verification logic and PLEASE USE MORE PRIVATE METHODS FOR IMPL
    } 

    verifyCardNumber(cardNum: number): boolean {
        return this.verifyWithLuhnAlg(cardNum);
    }

    private verifyWithLuhnAlg(cardNum: number): boolean {
        // luhn's algorithm implementation
        return true;
    }
}

// card.middleware.ts
export class CardMiddleware {
    constructor(private readonly cardService: CardService) {}

    verifyCard(req: Request, res: Response, next: NextFunction) {
        const { cardNum, cvv } = req.body;
        const isValidCardNum = this.cardService.verifyCardNumber(cardNum);
        if (!isValidCardNum) {
            return res.status(400).json({error: 'Invalid card num'});
        }
        const isValidCVV = this.cardService.verifyCVV(cardNum, cvv);
        if (!isValidCVV) {
            return res.status(400).json({error: 'Invalid cvv'});
        }
        next();
    }
}

//card.controller.ts
export class CardController {
    constructor(private readonly cardService: CardService) {}

    confirmPayment(req: Request, res: Response): void {
        const { cardNum, cvv } = req.body;
        res.json(this.cardService.confirmPayment(cardNum, cvv));
    }
}

// app.ts
import {CardService} from './card.service';
import {CardMiddleware} from './card.middleware';
import {CardController} from './card.controller';

app = express()

const cardService = new CardService();
const cardMiddleware = new CardMiddleware(cardService);
const cardController = new CardController(cardService);

app.use("/card", cardMiddleware.verifyCard);
app.use("/card", cardController.confirmPayment);
app.listen(5000);